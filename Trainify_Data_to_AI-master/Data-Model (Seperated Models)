{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "07ap_cvC1Ph-",
        "31E0RQhZ1Z8q"
      ],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Mreeb/Trainify_Data_to_AI/blob/master/Data-Model%20(Seperated%20Models)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")"
      ],
      "metadata": {
        "id": "pTz4pP5s6U2M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# List of Models We are Using"
      ],
      "metadata": {
        "id": "wmQSu2lp2Zqy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Supervise Learning models for Unlabeld Data\n",
        "slms = [\n",
        "    \"Linear Regression\",  #\n",
        "    \"Logistic Regression\", #\n",
        "    \"Decision Trees\", #\n",
        "    \"Random Forest\", #\n",
        "    \"Support Vector Machines (SVM)\", #\n",
        "    \"K-Nearest Neighbors (KNN)\", #\n",
        "    \"Neural Networks\", #\n",
        "    \"Naive Bayes\", #\n",
        "    \"XGBoost\", #\n",
        "    \"Elastic Net\" #\n",
        "]\n",
        "\n",
        "# Unsupervise Learning models for Unlabeld Data\n",
        "ulms = [\"K-Means Clustering\",\n",
        "        \"Gaussian Mixture Model (GMM)\"]"
      ],
      "metadata": {
        "id": "O5CD48HCZnoz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Imports"
      ],
      "metadata": {
        "id": "wlh2rCtQZjkM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
        "from sklearn.feature_selection import SelectKBest, f_regression, f_classif\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "## Regression Models\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.svm import SVR\n",
        "from sklearn.linear_model import LinearRegression, ElasticNet\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "from sklearn.neural_network import MLPRegressor\n",
        "from xgboost import XGBRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "## Classification Models\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.metrics import accuracy_score, f1_score"
      ],
      "metadata": {
        "id": "_MXQOWUQ1rXh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Supervised and Unsupervised Models"
      ],
      "metadata": {
        "id": "E6M1P8tYZoPo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Classification Model preprocessing (Optional)"
      ],
      "metadata": {
        "id": "07ap_cvC1Ph-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def classification_data_preprocessing(csv_path, target_column, num_selected_features):\n",
        "    df = pd.read_csv(csv_path)\n",
        "\n",
        "    print(\"Original Data:\")\n",
        "    print(df.head())\n",
        "\n",
        "    X = df.drop(columns=[target_column])\n",
        "    y = df[target_column]\n",
        "\n",
        "    label_encoder = LabelEncoder()\n",
        "    y_encoded = label_encoder.fit_transform(y)\n",
        "\n",
        "    numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "    numeric_transformer = Pipeline(steps=[\n",
        "        ('imputer', SimpleImputer(strategy='mean')),\n",
        "        ('scaler', StandardScaler())\n",
        "    ])\n",
        "\n",
        "    categorical_features = X.select_dtypes(include=['object']).columns\n",
        "    categorical_transformer = Pipeline(steps=[\n",
        "        ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "        ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "    ])\n",
        "\n",
        "    preprocessor = ColumnTransformer(\n",
        "        transformers=[\n",
        "            ('num', numeric_transformer, numeric_features),\n",
        "            ('cat', categorical_transformer, categorical_features)\n",
        "        ])\n",
        "\n",
        "    feature_selector = SelectKBest(score_func=f_classif, k=num_selected_features)\n",
        "\n",
        "    model = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                            ('selector', feature_selector),\n",
        "                            ('classifier', XGBClassifier())])\n",
        "\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "    model.fit(X_train, y_train)\n",
        "    y_pred = model.predict(X_test)\n",
        "\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    print(\"Model Evaluation:\")\n",
        "    print(f\"Accuracy: {accuracy}\")\n",
        "\n",
        "    return X, y"
      ],
      "metadata": {
        "id": "dZ2h5yNcytgN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Regression Model Preprocessing (Optional)"
      ],
      "metadata": {
        "id": "31E0RQhZ1Z8q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def regression_data_preprocessing(csv_path, target_column, num_selected_features):\n",
        "    df = pd.read_csv(csv_path)\n",
        "\n",
        "    print(\"Original Data:\")\n",
        "    print(df.head())\n",
        "\n",
        "    X = df.drop(columns=[target_column])\n",
        "    y = df[target_column]\n",
        "\n",
        "    numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "    numeric_transformer = Pipeline(steps=[\n",
        "        ('imputer', SimpleImputer(strategy='mean')),\n",
        "        ('scaler', StandardScaler())\n",
        "    ])\n",
        "\n",
        "    categorical_features = X.select_dtypes(include=['object']).columns\n",
        "    categorical_transformer = Pipeline(steps=[\n",
        "        ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "        ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "    ])\n",
        "\n",
        "    preprocessor = ColumnTransformer(\n",
        "        transformers=[\n",
        "            ('num', numeric_transformer, numeric_features),\n",
        "            ('cat', categorical_transformer, categorical_features)\n",
        "        ])\n",
        "\n",
        "    feature_selector = SelectKBest(score_func=f_regression, k=num_selected_features)\n",
        "\n",
        "    model = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                            ('selector', feature_selector),\n",
        "                            ('regressor', XGBRegressor())])\n",
        "\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "    model.fit(X_train, y_train)\n",
        "    y_pred = model.predict(X_test)\n",
        "\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "    print(\"Model Evaluation:\")\n",
        "    print(f\"Mean Squared Error (MSE): {mse}\")\n",
        "    print(f\"R-squared (R2): {r2}\")\n",
        "\n",
        "    return X, y"
      ],
      "metadata": {
        "id": "HOjv7Rv_yuXs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Generic Data preprocessing For Supervised Learning"
      ],
      "metadata": {
        "id": "NYaiY2Ab7R0P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def generic_data_preprocessing(csv_path, target_column, num_selected_features):\n",
        "    df = pd.read_csv(csv_path)\n",
        "\n",
        "    print(\"Original Data:\")\n",
        "    print(df.head())\n",
        "\n",
        "    X = df.drop(columns=[target_column])\n",
        "    y = df[target_column]\n",
        "\n",
        "    if y.dtypes == 'object':\n",
        "        label_encoder = LabelEncoder()\n",
        "        y_encoded = label_encoder.fit_transform(y)\n",
        "    else:\n",
        "        y_encoded = y\n",
        "\n",
        "    numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "    numeric_transformer = Pipeline(steps=[\n",
        "        ('imputer', SimpleImputer(strategy='mean')),\n",
        "        ('scaler', StandardScaler())\n",
        "    ])\n",
        "\n",
        "    categorical_features = X.select_dtypes(include=['object']).columns\n",
        "    categorical_transformer = Pipeline(steps=[\n",
        "        ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "        ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "    ])\n",
        "\n",
        "    preprocessor = ColumnTransformer(\n",
        "        transformers=[\n",
        "            ('num', numeric_transformer, numeric_features),\n",
        "            ('cat', categorical_transformer, categorical_features)\n",
        "        ])\n",
        "\n",
        "    if y.dtypes == 'object':\n",
        "        feature_selector = SelectKBest(score_func=f_classif, k=num_selected_features)\n",
        "        models = [\n",
        "            ('Decision Tree Classifier', DecisionTreeClassifier()),\n",
        "            ('SVC', SVC()),\n",
        "            ('Logistic Regression', LogisticRegression()),\n",
        "            ('Random Forest Classifier', RandomForestClassifier()),\n",
        "            ('K-Nearest Neighbors Classifier', KNeighborsClassifier()),\n",
        "            ('MLP Classifier', MLPClassifier(max_iter=5000)),\n",
        "            ('XGBoost Classifier', XGBClassifier())\n",
        "            # LSTM WILL BE ADDED\n",
        "        ]\n",
        "        print(\"Classification================\")\n",
        "    else:\n",
        "        feature_selector = SelectKBest(score_func=f_regression, k=num_selected_features)\n",
        "        models = [\n",
        "            ('Decision Tree Regressor', DecisionTreeRegressor()),\n",
        "            ('SVR', SVR()),\n",
        "            ('Linear Regression', LinearRegression()),\n",
        "            ('Elastic Net', ElasticNet()),\n",
        "            ('Random Forest Regressor', RandomForestRegressor()),\n",
        "            ('K-Nearest Neighbors Regressor', KNeighborsRegressor()),\n",
        "            ('MLP Regressor', MLPRegressor(max_iter=5000)),\n",
        "            ('XGBoost Regressor', XGBRegressor())\n",
        "        ]\n",
        "        print(\"Regression===================\")\n",
        "\n",
        "    best_model_name = None\n",
        "    best_metric = float('-inf') if y.dtypes == 'object' else float('-inf')\n",
        "\n",
        "    for model_name, model in models:\n",
        "        model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                          ('selector', feature_selector),\n",
        "                                          ('model', model)])\n",
        "\n",
        "        X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "        model_pipeline.fit(X_train, y_train)\n",
        "        y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "        if y.dtypes == 'object':\n",
        "            metric = accuracy_score(y_test, y_pred)\n",
        "\n",
        "            f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "            print(f\"\\nModel: {model_name}\")\n",
        "            print(f\"F1 Score: {f1}\")\n",
        "\n",
        "            print(f\"Performance Metric: {int(metric*100)}%\")\n",
        "\n",
        "        else:\n",
        "            mse = mean_squared_error(y_test, y_pred)\n",
        "            r2 = r2_score(y_test, y_pred)\n",
        "            print(f\"\\nModel: {model_name}\")\n",
        "            print(f\"r2_Score: {int(r2*100)}%\")\n",
        "            #metric = r2 if y.dtypes == 'object' else -mse\n",
        "            metric = r2\n",
        "\n",
        "            print(f\"Performance Metric: {-mse}\")\n",
        "\n",
        "\n",
        "        # Choose the model with the highest accuracy or the lowest MSE/r2 as the best model\n",
        "        if (y.dtypes == 'object' and metric > best_metric) or (y.dtypes != 'object' and metric > best_metric):\n",
        "            best_metric = metric\n",
        "            best_model_name = model_name\n",
        "\n",
        "    print(f\"\\nBest Model: {best_model_name} (based on Performance Metric)\")\n",
        "    return X, y\n"
      ],
      "metadata": {
        "id": "Y5vLoViSNiEm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Main\n",
        "\n",
        "*   # Upload a CSV for Training Here\n",
        "\n",
        "*   # Input the Target Colunm\n",
        "\n"
      ],
      "metadata": {
        "id": "koQvE3Vd1y-5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "csv_file_path = 'apples_and_oranges.csv' # @param {type:\"string\"}\n",
        "Your_target_column = 'Class' # @param {type:\"string\"}\n",
        "\n",
        "df = pd.read_csv(csv_file_path)\n",
        "\n",
        "num_columns = df.shape[1]\n",
        "print(\"Features = \", num_columns)\n",
        "features = df.shape[1] - 1\n",
        "X_processed, y_processed = generic_data_preprocessing(csv_file_path, Your_target_column, features)\n",
        "\n"
      ],
      "metadata": {
        "id": "I7p52A4Aw0FW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b212f735-70a6-44ce-88b0-091cab6b59cb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features =  3\n",
            "Original Data:\n",
            "   Weight  Size   Class\n",
            "0      69  4.39  orange\n",
            "1      69  4.21  orange\n",
            "2      65  4.09  orange\n",
            "3      72  5.85   apple\n",
            "4      67  4.70  orange\n",
            "Classification================\n",
            "\n",
            "Model: Decision Tree Classifier\n",
            "F1 Score: 1.0\n",
            "Performance Metric: 100%\n",
            "\n",
            "Model: SVC\n",
            "F1 Score: 1.0\n",
            "Performance Metric: 100%\n",
            "\n",
            "Model: Logistic Regression\n",
            "F1 Score: 1.0\n",
            "Performance Metric: 100%\n",
            "\n",
            "Model: Random Forest Classifier\n",
            "F1 Score: 1.0\n",
            "Performance Metric: 100%\n",
            "\n",
            "Model: K-Nearest Neighbors Classifier\n",
            "F1 Score: 1.0\n",
            "Performance Metric: 100%\n",
            "\n",
            "Model: MLP Classifier\n",
            "F1 Score: 1.0\n",
            "Performance Metric: 100%\n",
            "\n",
            "Model: XGBoost Classifier\n",
            "F1 Score: 1.0\n",
            "Performance Metric: 100%\n",
            "\n",
            "Best Model: Decision Tree Classifier (based on Performance Metric)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install scikit-learn"
      ],
      "metadata": {
        "id": "meXnL9-D6FWH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Clustring"
      ],
      "metadata": {
        "id": "RUSCxoih5iZ7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.metrics import silhouette_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "def find_optimal_clusters(X, max_clusters=10):\n",
        "    silhouette_scores = []\n",
        "\n",
        "    for k in range(2, max_clusters + 1):\n",
        "        kmeans_model = KMeans(n_clusters=k, random_state=42)\n",
        "        kmeans_labels = kmeans_model.fit_predict(X)\n",
        "        silhouette_scores.append(silhouette_score(X, kmeans_labels))\n",
        "\n",
        "    return silhouette_scores\n",
        "\n",
        "def plot_silhouette_scores(silhouette_scores, max_clusters=10):\n",
        "    plt.figure(figsize=(6, 4))\n",
        "    plt.plot(range(2, max_clusters + 1), silhouette_scores, marker='o')\n",
        "    plt.xlabel('Number of Clusters')\n",
        "    plt.ylabel('Silhouette Score')\n",
        "    plt.title('Silhouette Score for Different Clusters')\n",
        "    plt.show()\n",
        "\n",
        "def plot_clusters(data, labels, centers):\n",
        "    plt.scatter(data[:, 0], data[:, 1], c=labels, cmap='viridis', alpha=0.5)\n",
        "    plt.scatter(centers[:, 0], centers[:, 1], c='red', marker='X', s=200, label='Cluster Centers')\n",
        "    plt.title('K-means Clustering')\n",
        "    plt.xlabel('Feature 1')\n",
        "    plt.ylabel('Feature 2')\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "def generic_clustering(csv_path,column, max_clusters=10):\n",
        "    df = pd.read_csv(csv_path)\n",
        "\n",
        "    print(\"Original Data:\")\n",
        "    print(df.head())\n",
        "\n",
        "    column_to_drop = column\n",
        "    df = df.drop(column_to_drop, axis=1)\n",
        "\n",
        "    numeric_features = df.select_dtypes(include=['float64', 'int64']).columns\n",
        "    numeric_transformer = Pipeline(steps=[\n",
        "        ('imputer', SimpleImputer(strategy='mean')),\n",
        "        ('scaler', StandardScaler())\n",
        "    ])\n",
        "\n",
        "    preprocessor = ColumnTransformer(\n",
        "        transformers=[\n",
        "            ('num', numeric_transformer, numeric_features),\n",
        "        ])\n",
        "\n",
        "    processed_data = preprocessor.fit_transform(df)\n",
        "    silhouette_scores = find_optimal_clusters(processed_data, max_clusters)\n",
        "    plot_silhouette_scores(silhouette_scores, max_clusters)\n",
        "\n",
        "    optimal_num_clusters = np.argmax(silhouette_scores) + 2  # Adding 2 to get the actual number of clusters\n",
        "\n",
        "    kmeans_model = KMeans(n_clusters=optimal_num_clusters, random_state=42)\n",
        "    kmeans_labels = kmeans_model.fit_predict(processed_data)\n",
        "\n",
        "    silhouette_kmeans = silhouette_score(processed_data, kmeans_labels)\n",
        "\n",
        "    print(f'\\nBest Clustering Algorithm: K-Means')\n",
        "    print(f'Optimal Number of Clusters: {optimal_num_clusters}')\n",
        "    print(f'Best Silhouette Score: {silhouette_kmeans:.4f}')\n",
        "\n",
        "    df['Cluster_Labels_KMeans'] = kmeans_labels\n",
        "    print(df[['Cluster_Labels_KMeans']])\n",
        "\n",
        "    # Plot the distribution of clusters\n",
        "    plt.figure(figsize=(8, 4))\n",
        "    plt.bar(np.unique(kmeans_labels), np.bincount(kmeans_labels))\n",
        "    plt.xlabel('Cluster Label')\n",
        "    plt.ylabel('Count')\n",
        "    plt.title('Cluster Distribution')\n",
        "    plt.show()\n",
        "\n",
        "    plot_clusters(processed_data, kmeans_labels, kmeans_model.cluster_centers_)"
      ],
      "metadata": {
        "id": "PPnGyrtC1LsA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Clustring Un Labeled Data\n",
        "# Name of the CSV\n",
        "# Column to Drop"
      ],
      "metadata": {
        "id": "UfckKgqR5mQs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Data_CSV = 'concrete_data.csv' #@param {type:\"string\"}\n",
        "Drop_column = \"Cement\" #@param {type:\"string\"}\n",
        "generic_clustering(Data_CSV,Drop_column)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "7ln-m4pd4DHb",
        "outputId": "941ea185-c1fa-48d4-f4c4-190a56a5296f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Data:\n",
            "   Cement  Blast Furnace Slag  Fly Ash  Water  Superplasticizer  \\\n",
            "0   540.0                 0.0      0.0  162.0               2.5   \n",
            "1   540.0                 0.0      0.0  162.0               2.5   \n",
            "2   332.5               142.5      0.0  228.0               0.0   \n",
            "3   332.5               142.5      0.0  228.0               0.0   \n",
            "4   198.6               132.4      0.0  192.0               0.0   \n",
            "\n",
            "   Coarse Aggregate  Fine Aggregate  Age  Strength  \n",
            "0            1040.0           676.0   28     79.99  \n",
            "1            1055.0           676.0   28     61.89  \n",
            "2             932.0           594.0  270     40.27  \n",
            "3             932.0           594.0  365     41.05  \n",
            "4             978.4           825.5  360     44.30  \n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Best Clustering Algorithm: K-Means\n",
            "Optimal Number of Clusters: 7\n",
            "Best Silhouette Score: 0.2598\n",
            "      Cluster_Labels_KMeans\n",
            "0                         6\n",
            "1                         6\n",
            "2                         5\n",
            "3                         5\n",
            "4                         5\n",
            "...                     ...\n",
            "1025                      3\n",
            "1026                      3\n",
            "1027                      3\n",
            "1028                      2\n",
            "1029                      3\n",
            "\n",
            "[1030 rows x 1 columns]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "9SjpPvHZ04m2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Testing Code Base"
      ],
      "metadata": {
        "id": "_dqhSfy18qhF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "# CLASSIFICATION\n",
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "chsETW-ukFGb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# XG BOOST CLASSIFER\n"
      ],
      "metadata": {
        "id": "kyK1Zg3rxmTL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, f1_score, mean_squared_error, r2_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "# Load your data\n",
        "csv_path = 'YOUR_DATA_CSV'\n",
        "target_column = 'TARGET_COLUMN'\n",
        "df = pd.read_csv(csv_path)\n",
        "\n",
        "num_columns = df.shape[1]\n",
        "print(\"Features = \", num_columns)\n",
        "num_selected_features = df.shape[1] - 1\n",
        "\n",
        "print(\"Original Data:\")\n",
        "print(df.head())\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    label_encoder = LabelEncoder()\n",
        "    y_encoded = label_encoder.fit_transform(y)\n",
        "else:\n",
        "    y_encoded = y\n",
        "\n",
        "numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_features = X.select_dtypes(include=['object']).columns\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_features),\n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ])\n",
        "\n",
        "feature_selector = SelectKBest(score_func=f_classif, k=num_selected_features)\n",
        "\n",
        "model = XGBClassifier()\n",
        "\n",
        "model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                  ('selector', feature_selector),\n",
        "                                  ('model', model)])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    metric = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "    print(f\"\\nModel: XGBoost Classifier\")\n",
        "    print(f\"F1 Score: {f1}\")\n",
        "\n",
        "    print(f\"Performance Metric: {int(metric * 100)}%\")\n",
        "\n",
        "else:\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    print(f\"\\nModel: XGBoost Classifier\")\n",
        "    print(f\"r2_Score: {int(r2 * 100)}%\")\n",
        "    metric = r2\n",
        "\n",
        "    print(f\"Performance Metric: {-mse}\")\n",
        "\n",
        "print(f\"\\nModel: XGBoost Classifier\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bQ5FJndn8u2y",
        "outputId": "ef55f3d5-a122-4c9a-cc0f-fcca07592cd7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features =  24\n",
            "Original Data:\n",
            "   Age  Duration  Frequency  Location  Character  Intensity  Nausea  Vomit  \\\n",
            "0   30         1          5         1          1          2       1      0   \n",
            "1   50         3          5         1          1          3       1      1   \n",
            "2   53         2          1         1          1          2       1      1   \n",
            "3   45         3          5         1          1          3       1      0   \n",
            "4   53         1          1         1          1          2       1      0   \n",
            "\n",
            "   Phonophobia  Photophobia  ...  Vertigo  Tinnitus  Hypoacusis  Diplopia  \\\n",
            "0            1            1  ...        0         0           0         0   \n",
            "1            1            1  ...        1         0           0         0   \n",
            "2            1            1  ...        0         0           0         0   \n",
            "3            1            1  ...        1         0           0         0   \n",
            "4            1            1  ...        0         0           0         0   \n",
            "\n",
            "   Defect  Ataxia  Conscience  Paresthesia  DPF                        Type  \n",
            "0       0       0           0            0    0  Typical aura with migraine  \n",
            "1       0       0           0            0    0  Typical aura with migraine  \n",
            "2       0       0           0            0    0  Typical aura with migraine  \n",
            "3       0       0           0            0    0  Typical aura with migraine  \n",
            "4       0       0           0            0    1  Typical aura with migraine  \n",
            "\n",
            "[5 rows x 24 columns]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/feature_selection/_univariate_selection.py:112: UserWarning: Features [19] are constant.\n",
            "  warnings.warn(\"Features %s are constant.\" % constant_features_idx, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/feature_selection/_univariate_selection.py:113: RuntimeWarning: invalid value encountered in divide\n",
            "  f = msb / msw\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Model: XGBoost Classifier\n",
            "F1 Score: 0.8729572510822511\n",
            "Performance Metric: 88%\n",
            "\n",
            "Model: XGBoost Classifier\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# MLP CLASSIFER"
      ],
      "metadata": {
        "id": "c96DFmQYx2Q8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, f1_score, mean_squared_error, r2_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "# Load your data\n",
        "csv_path = 'YOUR_DATA_CSV'\n",
        "target_column = 'TARGET_COLUMN'\n",
        "df = pd.read_csv(csv_path)\n",
        "\n",
        "num_columns = df.shape[1]\n",
        "print(\"Features = \", num_columns)\n",
        "num_selected_features = df.shape[1] - 1\n",
        "\n",
        "print(\"Original Data:\")\n",
        "print(df.head())\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    label_encoder = LabelEncoder()\n",
        "    y_encoded = label_encoder.fit_transform(y)\n",
        "else:\n",
        "    y_encoded = y\n",
        "\n",
        "numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_features = X.select_dtypes(include=['object']).columns\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_features),\n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ])\n",
        "\n",
        "feature_selector = SelectKBest(score_func=f_classif, k=num_selected_features)\n",
        "\n",
        "model = MLPClassifier(max_iter=5000)  # Set max_iter to 5000\n",
        "\n",
        "model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                  ('selector', feature_selector),\n",
        "                                  ('model', model)])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    metric = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "    print(f\"\\nModel: MLP Classifier\")\n",
        "    print(f\"F1 Score: {f1}\")\n",
        "\n",
        "    print(f\"Performance Metric: {int(metric * 100)}%\")\n",
        "\n",
        "else:\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    print(f\"\\nModel: MLP Classifier\")\n",
        "    print(f\"r2_Score: {int(r2 * 100)}%\")\n",
        "    metric = r2\n",
        "\n",
        "    print(f\"Performance Metric: {-mse}\")\n",
        "\n",
        "print(f\"Model: MLP Classifier\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WkD9JgrJ9tZg",
        "outputId": "b90711ed-50d5-47d3-c83d-0e049a5fd6c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features =  24\n",
            "Original Data:\n",
            "   Age  Duration  Frequency  Location  Character  Intensity  Nausea  Vomit  \\\n",
            "0   30         1          5         1          1          2       1      0   \n",
            "1   50         3          5         1          1          3       1      1   \n",
            "2   53         2          1         1          1          2       1      1   \n",
            "3   45         3          5         1          1          3       1      0   \n",
            "4   53         1          1         1          1          2       1      0   \n",
            "\n",
            "   Phonophobia  Photophobia  ...  Vertigo  Tinnitus  Hypoacusis  Diplopia  \\\n",
            "0            1            1  ...        0         0           0         0   \n",
            "1            1            1  ...        1         0           0         0   \n",
            "2            1            1  ...        0         0           0         0   \n",
            "3            1            1  ...        1         0           0         0   \n",
            "4            1            1  ...        0         0           0         0   \n",
            "\n",
            "   Defect  Ataxia  Conscience  Paresthesia  DPF                        Type  \n",
            "0       0       0           0            0    0  Typical aura with migraine  \n",
            "1       0       0           0            0    0  Typical aura with migraine  \n",
            "2       0       0           0            0    0  Typical aura with migraine  \n",
            "3       0       0           0            0    0  Typical aura with migraine  \n",
            "4       0       0           0            0    1  Typical aura with migraine  \n",
            "\n",
            "[5 rows x 24 columns]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/feature_selection/_univariate_selection.py:112: UserWarning: Features [19] are constant.\n",
            "  warnings.warn(\"Features %s are constant.\" % constant_features_idx, UserWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/feature_selection/_univariate_selection.py:113: RuntimeWarning: invalid value encountered in divide\n",
            "  f = msb / msw\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Model: MLP Classifier\n",
            "F1 Score: 0.9310144205209996\n",
            "Performance Metric: 92%\n",
            "Model: MLP Classifier\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# RANDOM FOREST"
      ],
      "metadata": {
        "id": "lxSLm7DR_bL_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, f1_score, mean_squared_error, r2_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "# Load your data\n",
        "csv_path = 'YOUR_DATA_CSV'\n",
        "target_column = 'TARGET_COLUMN'\n",
        "df = pd.read_csv(csv_path)\n",
        "\n",
        "num_columns = df.shape[1]\n",
        "print(\"Features = \", num_columns)\n",
        "num_selected_features = df.shape[1] - 1\n",
        "\n",
        "print(\"Original Data:\")\n",
        "print(df.head())\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    label_encoder = LabelEncoder()\n",
        "    y_encoded = label_encoder.fit_transform(y)\n",
        "else:\n",
        "    y_encoded = y\n",
        "\n",
        "numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_features = X.select_dtypes(include=['object']).columns\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_features),\n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ])\n",
        "\n",
        "feature_selector = SelectKBest(score_func=f_classif, k=num_selected_features)\n",
        "\n",
        "model = RandomForestClassifier();\n",
        "\n",
        "model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                  ('selector', feature_selector),\n",
        "                                  ('model', model)])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    metric = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "    print(f\"\\nModel: Random Forest Classifier\")\n",
        "    print(f\"F1 Score: {f1}\")\n",
        "\n",
        "    print(f\"Performance Metric: {int(metric * 100)}%\")\n",
        "\n",
        "else:\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    print(f\"\\nModel: Random Forest Classifier\")\n",
        "    print(f\"r2_Score: {int(r2 * 100)}%\")\n",
        "    metric = r2\n",
        "\n",
        "    print(f\"Performance Metric: {-mse}\")\n",
        "\n",
        "print(f\"Model: Random Forest Classifier\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vXb9yigK4KCy",
        "outputId": "cd72b0d5-a20f-4f69-b364-3f4b0084b132"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features =  12\n",
            "Original Data:\n",
            "   Age Sex ChestPainType  RestingBP  Cholesterol  FastingBS RestingECG  MaxHR  \\\n",
            "0   40   M           ATA        140          289          0     Normal    172   \n",
            "1   49   F           NAP        160          180          0     Normal    156   \n",
            "2   37   M           ATA        130          283          0         ST     98   \n",
            "3   48   F           ASY        138          214          0     Normal    108   \n",
            "4   54   M           NAP        150          195          0     Normal    122   \n",
            "\n",
            "  ExerciseAngina  Oldpeak ST_Slope  HeartDisease  \n",
            "0              N      0.0       Up             0  \n",
            "1              N      1.0     Flat             1  \n",
            "2              N      0.0       Up             0  \n",
            "3              Y      1.5     Flat             1  \n",
            "4              N      0.0       Up             0  \n",
            "\n",
            "Model: Random Forest Classifier\n",
            "r2_Score: 19%\n",
            "Performance Metric: -0.1956521739130435\n",
            "Model: Random Forest Classifier\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# K NEAREST NEIGHBORS"
      ],
      "metadata": {
        "id": "q8W5nAY4D4xZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, f1_score, mean_squared_error, r2_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "# Load your data\n",
        "csv_path = 'YOUR_DATA_CSV'\n",
        "target_column = 'TARGET_COLUMN'\n",
        "df = pd.read_csv(csv_path)\n",
        "\n",
        "num_columns = df.shape[1]\n",
        "print(\"Features = \", num_columns)\n",
        "num_selected_features = df.shape[1] - 1\n",
        "\n",
        "print(\"Original Data:\")\n",
        "print(df.head())\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    label_encoder = LabelEncoder()\n",
        "    y_encoded = label_encoder.fit_transform(y)\n",
        "else:\n",
        "    y_encoded = y\n",
        "\n",
        "numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_features = X.select_dtypes(include=['object']).columns\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_features),\n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ])\n",
        "\n",
        "feature_selector = SelectKBest(score_func=f_classif, k=num_selected_features)\n",
        "\n",
        "model = KNeighborsClassifier();\n",
        "\n",
        "model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                  ('selector', feature_selector),\n",
        "                                  ('model', model)])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    metric = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "    print(f\"\\nModel: K-Nearest Neighbors\")\n",
        "    print(f\"F1 Score: {f1}\")\n",
        "\n",
        "    print(f\"Performance Metric: {int(metric * 100)}%\")\n",
        "\n",
        "else:\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    print(f\"\\nModel: K-Nearest Neighbors\")\n",
        "    print(f\"r2_Score: {int(r2 * 100)}%\")\n",
        "    metric = r2\n",
        "\n",
        "    print(f\"Performance Metric: {-mse}\")\n",
        "\n",
        "print(f\"Model: K-Nearest Neighbors\")\n"
      ],
      "metadata": {
        "id": "AA7Dr-ISD30V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# DECISION TREE"
      ],
      "metadata": {
        "id": "ENvX_rlsmaAE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, f1_score, mean_squared_error, r2_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "# Load your data\n",
        "csv_path = 'YOUR_DATA_CSV'\n",
        "target_column = 'TARGET_COLUMN'\n",
        "df = pd.read_csv(csv_path)\n",
        "\n",
        "num_columns = df.shape[1]\n",
        "print(\"Features = \", num_columns)\n",
        "num_selected_features = df.shape[1] - 1\n",
        "\n",
        "print(\"Original Data:\")\n",
        "print(df.head())\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    label_encoder = LabelEncoder()\n",
        "    y_encoded = label_encoder.fit_transform(y)\n",
        "else:\n",
        "    y_encoded = y\n",
        "\n",
        "numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_features = X.select_dtypes(include=['object']).columns\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_features),\n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ])\n",
        "\n",
        "feature_selector = SelectKBest(score_func=f_classif, k=num_selected_features)\n",
        "\n",
        "model =  DecisionTreeClassifier();\n",
        "\n",
        "model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                  ('selector', feature_selector),\n",
        "                                  ('model', model)])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    metric = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "    print(f\"\\nModel: Decision Tree Classifier\")\n",
        "    print(f\"F1 Score: {f1}\")\n",
        "\n",
        "    print(f\"Performance Metric: {int(metric * 100)}%\")\n",
        "\n",
        "else:\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    print(f\"\\nModel: Decision Tree Classifier\")\n",
        "    print(f\"r2_Score: {int(r2 * 100)}%\")\n",
        "    metric = r2\n",
        "\n",
        "    print(f\"Performance Metric: {-mse}\")\n",
        "\n",
        "print(f\"Model: Decision Tree Classifier\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BIuFwcf3mV1Y",
        "outputId": "0d68383f-c1c7-413b-d74b-e14536b5e280"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features =  5\n",
            "Original Data:\n",
            "   sepal_length  sepal_width  petal_length  petal_width      species\n",
            "0           5.1          3.5           1.4          0.2  Iris-setosa\n",
            "1           4.9          3.0           1.4          0.2  Iris-setosa\n",
            "2           4.7          3.2           1.3          0.2  Iris-setosa\n",
            "3           4.6          3.1           1.5          0.2  Iris-setosa\n",
            "4           5.0          3.6           1.4          0.2  Iris-setosa\n",
            "\n",
            "Model: Decision Tree Classifier\n",
            "F1 Score: 1.0\n",
            "Performance Metric: 100%\n",
            "Model: Decision Tree Classifier\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# SVC"
      ],
      "metadata": {
        "id": "jLXzE0O9oAQu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, f1_score, mean_squared_error, r2_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "# Load your data\n",
        "csv_path = 'YOUR_DATA_CSV'\n",
        "target_column = 'TARGET_COLUMN'\n",
        "df = pd.read_csv(csv_path)\n",
        "\n",
        "num_columns = df.shape[1]\n",
        "print(\"Features = \", num_columns)\n",
        "num_selected_features = df.shape[1] - 1\n",
        "\n",
        "print(\"Original Data:\")\n",
        "print(df.head())\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    label_encoder = LabelEncoder()\n",
        "    y_encoded = label_encoder.fit_transform(y)\n",
        "else:\n",
        "    y_encoded = y\n",
        "\n",
        "numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_features = X.select_dtypes(include=['object']).columns\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_features),\n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ])\n",
        "\n",
        "feature_selector = SelectKBest(score_func=f_classif, k=num_selected_features)\n",
        "\n",
        "model = SVC();\n",
        "\n",
        "model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                  ('selector', feature_selector),\n",
        "                                  ('model', model)])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    metric = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "    print(f\"\\nModel: SVC\")\n",
        "    print(f\"F1 Score: {f1}\")\n",
        "\n",
        "    print(f\"Performance Metric: {int(metric * 100)}%\")\n",
        "\n",
        "else:\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    print(f\"\\nModel: SVC\")\n",
        "    print(f\"r2_Score: {int(r2 * 100)}%\")\n",
        "    metric = r2\n",
        "\n",
        "    print(f\"Performance Metric: {-mse}\")\n",
        "\n",
        "print(f\"Model: SVC\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kwVpDMrGn7De",
        "outputId": "e3248a4e-576a-4560-e277-f78446cf61f4"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features =  5\n",
            "Original Data:\n",
            "   sepal_length  sepal_width  petal_length  petal_width      species\n",
            "0           5.1          3.5           1.4          0.2  Iris-setosa\n",
            "1           4.9          3.0           1.4          0.2  Iris-setosa\n",
            "2           4.7          3.2           1.3          0.2  Iris-setosa\n",
            "3           4.6          3.1           1.5          0.2  Iris-setosa\n",
            "4           5.0          3.6           1.4          0.2  Iris-setosa\n",
            "\n",
            "Model: SVC\n",
            "F1 Score: 1.0\n",
            "Performance Metric: 100%\n",
            "Model: SVC\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# LOGISTIC REGRESSION"
      ],
      "metadata": {
        "id": "oSSBycw5pCEg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, f1_score, mean_squared_error, r2_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "# Load your data\n",
        "csv_path = 'YOUR_DATA_CSV'\n",
        "target_column = 'TARGET_COLUMN'\n",
        "df = pd.read_csv(csv_path)\n",
        "\n",
        "num_columns = df.shape[1]\n",
        "print(\"Features = \", num_columns)\n",
        "num_selected_features = df.shape[1] - 1\n",
        "\n",
        "print(\"Original Data:\")\n",
        "print(df.head())\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    label_encoder = LabelEncoder()\n",
        "    y_encoded = label_encoder.fit_transform(y)\n",
        "else:\n",
        "    y_encoded = y\n",
        "\n",
        "numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_features = X.select_dtypes(include=['object']).columns\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_features),\n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ])\n",
        "\n",
        "feature_selector = SelectKBest(score_func=f_classif, k=num_selected_features)\n",
        "\n",
        "model = LogisticRegression();\n",
        "\n",
        "model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                  ('selector', feature_selector),\n",
        "                                  ('model', model)])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    metric = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "    print(f\"\\nModel: Logistic Regression\")\n",
        "    print(f\"F1 Score: {f1}\")\n",
        "\n",
        "    print(f\"Performance Metric: {int(metric * 100)}%\")\n",
        "\n",
        "else:\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    print(f\"\\nModel: Logistic Regression\")\n",
        "    print(f\"r2_Score: {int(r2 * 100)}%\")\n",
        "    metric = r2\n",
        "\n",
        "    print(f\"Performance Metric: {-mse}\")\n",
        "\n",
        "print(f\"Model: Logistic Regression\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2B3FywkDpFpE",
        "outputId": "eca8c567-575b-44bc-bd00-29ab420b6ef5"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features =  12\n",
            "Original Data:\n",
            "   Age Sex ChestPainType  RestingBP  Cholesterol  FastingBS RestingECG  MaxHR  \\\n",
            "0   40   M           ATA        140          289          0     Normal    172   \n",
            "1   49   F           NAP        160          180          0     Normal    156   \n",
            "2   37   M           ATA        130          283          0         ST     98   \n",
            "3   48   F           ASY        138          214          0     Normal    108   \n",
            "4   54   M           NAP        150          195          0     Normal    122   \n",
            "\n",
            "  ExerciseAngina  Oldpeak ST_Slope  HeartDisease  \n",
            "0              N      0.0       Up             0  \n",
            "1              N      1.0     Flat             1  \n",
            "2              N      0.0       Up             0  \n",
            "3              Y      1.5     Flat             1  \n",
            "4              N      0.0       Up             0  \n",
            "\n",
            "Model: Logistic Regression\n",
            "r2_Score: 37%\n",
            "Performance Metric: -0.15217391304347827\n",
            "Model: Logistic Regression\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "# REGRESSION\n",
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "8OjgSDS4j5iC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# XGBOST REGRESSION"
      ],
      "metadata": {
        "id": "1DLuWGF9yM5B"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, f1_score, mean_squared_error, r2_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from xgboost import XGBRegressor\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "# Load your data\n",
        "csv_path = 'concrete_data.csv'\n",
        "target_column = 'Strength'\n",
        "df = pd.read_csv(csv_path)\n",
        "\n",
        "num_columns = df.shape[1]\n",
        "print(\"Features = \", num_columns)\n",
        "num_selected_features = df.shape[1] - 1\n",
        "\n",
        "print(\"Original Data:\")\n",
        "print(df.head())\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    label_encoder = LabelEncoder()\n",
        "    y_encoded = label_encoder.fit_transform(y)\n",
        "else:\n",
        "    y_encoded = y\n",
        "\n",
        "numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_features = X.select_dtypes(include=['object']).columns\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_features),\n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ])\n",
        "\n",
        "feature_selector = SelectKBest(score_func=f_classif, k=num_selected_features)\n",
        "\n",
        "model = XGBRegressor()\n",
        "\n",
        "model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                  ('selector', feature_selector),\n",
        "                                  ('model', model)])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    metric = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "    print(f\"\\nModel: XGBoost Classifier\")\n",
        "    print(f\"F1 Score: {f1}\")\n",
        "\n",
        "    print(f\"Performance Metric: {int(metric * 100)}%\")\n",
        "\n",
        "else:\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    print(f\"\\nModel: XGBoost Classifier\")\n",
        "    print(f\"r2_Score: {int(r2 * 100)}%\")\n",
        "    metric = r2\n",
        "\n",
        "    print(f\"Performance Metric: {-mse}\")\n",
        "\n",
        "print(f\"\\nModel: XGBoostRegressor\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1LUUv5kNxxG4",
        "outputId": "e84f0af5-8ace-44be-bbd0-f5f01759d403"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features =  9\n",
            "Original Data:\n",
            "   Cement  Blast Furnace Slag  Fly Ash  Water  Superplasticizer  \\\n",
            "0   540.0                 0.0      0.0  162.0               2.5   \n",
            "1   540.0                 0.0      0.0  162.0               2.5   \n",
            "2   332.5               142.5      0.0  228.0               0.0   \n",
            "3   332.5               142.5      0.0  228.0               0.0   \n",
            "4   198.6               132.4      0.0  192.0               0.0   \n",
            "\n",
            "   Coarse Aggregate  Fine Aggregate  Age  Strength  \n",
            "0            1040.0           676.0   28     79.99  \n",
            "1            1055.0           676.0   28     61.89  \n",
            "2             932.0           594.0  270     40.27  \n",
            "3             932.0           594.0  365     41.05  \n",
            "4             978.4           825.5  360     44.30  \n",
            "\n",
            "Model: XGBoost Classifier\n",
            "r2_Score: 91%\n",
            "Performance Metric: -21.21804757371494\n",
            "\n",
            "Model: XGBoostRegressor\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# K NEAREST NEIGHBORS"
      ],
      "metadata": {
        "id": "dyjk5BmXL7ZY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, f1_score, mean_squared_error, r2_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "from sklearn.compose import ColumnTransformer\n",
        "# Load your data\n",
        "csv_path = '/content/concrete_data.csv'\n",
        "target_column = 'Strength'\n",
        "df = pd.read_csv(csv_path)\n",
        "\n",
        "num_columns = df.shape[1]\n",
        "print(\"Features = \", num_columns)\n",
        "num_selected_features = df.shape[1] - 1\n",
        "\n",
        "print(\"Original Data:\")\n",
        "print(df.head())\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    label_encoder = LabelEncoder()\n",
        "    y_encoded = label_encoder.fit_transform(y)\n",
        "else:\n",
        "    y_encoded = y\n",
        "\n",
        "numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_features = X.select_dtypes(include=['object']).columns\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_features),\n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ])\n",
        "\n",
        "feature_selector = SelectKBest(score_func=f_classif, k=num_selected_features)\n",
        "\n",
        "model = KNeighborsRegressor();\n",
        "\n",
        "model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                  ('selector', feature_selector),\n",
        "                                  ('model', model)])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    metric = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "    print(f\"\\nModel: K-Nearest Neighbors\")\n",
        "    print(f\"F1 Score: {f1}\")\n",
        "\n",
        "    print(f\"Performance Metric: {int(metric * 100)}%\")\n",
        "\n",
        "else:\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    print(f\"\\nModel: K-Nearest Neighbors\")\n",
        "    print(f\"r2_Score: {int(r2 * 100)}%\")\n",
        "    metric = r2\n",
        "\n",
        "    print(f\"Performance Metric: {-mse}\")\n",
        "\n",
        "print(f\"Model: K-Nearest Neighbors\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f7294da1-3700-4f14-c565-a562ec2666b7",
        "id": "wPsu7CwXMBnw"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features =  9\n",
            "Original Data:\n",
            "   Cement  Blast Furnace Slag  Fly Ash  Water  Superplasticizer  \\\n",
            "0   540.0                 0.0      0.0  162.0               2.5   \n",
            "1   540.0                 0.0      0.0  162.0               2.5   \n",
            "2   332.5               142.5      0.0  228.0               0.0   \n",
            "3   332.5               142.5      0.0  228.0               0.0   \n",
            "4   198.6               132.4      0.0  192.0               0.0   \n",
            "\n",
            "   Coarse Aggregate  Fine Aggregate  Age  Strength  \n",
            "0            1040.0           676.0   28     79.99  \n",
            "1            1055.0           676.0   28     61.89  \n",
            "2             932.0           594.0  270     40.27  \n",
            "3             932.0           594.0  365     41.05  \n",
            "4             978.4           825.5  360     44.30  \n",
            "\n",
            "Model: K-Nearest Neighbors\n",
            "r2_Score: 71%\n",
            "Performance Metric: -72.4487623106796\n",
            "Model: K-Nearest Neighbors\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# MLP REGRESSOR"
      ],
      "metadata": {
        "id": "GpPO6-cNyhyF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, f1_score, mean_squared_error, r2_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.neural_network import MLPRegressor\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "# Load your data\n",
        "csv_path = '/content/concrete_data.csv'\n",
        "target_column = 'Strength'\n",
        "df = pd.read_csv(csv_path)\n",
        "\n",
        "num_columns = df.shape[1]\n",
        "print(\"Features = \", num_columns)\n",
        "num_selected_features = df.shape[1] - 1\n",
        "\n",
        "print(\"Original Data:\")\n",
        "print(df.head())\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    label_encoder = LabelEncoder()\n",
        "    y_encoded = label_encoder.fit_transform(y)\n",
        "else:\n",
        "    y_encoded = y\n",
        "\n",
        "numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_features = X.select_dtypes(include=['object']).columns\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_features),\n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ])\n",
        "\n",
        "feature_selector = SelectKBest(score_func=f_classif, k=num_selected_features)\n",
        "\n",
        "model = MLPRegressor(max_iter=5000);    # 5000 Iterations\n",
        "\n",
        "model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                  ('selector', feature_selector),\n",
        "                                  ('model', model)])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    metric = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "    print(f\"\\nModel: MLP Regressor\")\n",
        "    print(f\"F1 Score: {f1}\")\n",
        "\n",
        "    print(f\"Performance Metric: {int(metric * 100)}%\")\n",
        "\n",
        "else:\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    print(f\"\\nModel: MLP Regressor\")\n",
        "    print(f\"r2_Score: {int(r2 * 100)}%\")\n",
        "    metric = r2\n",
        "\n",
        "    print(f\"Performance Metric: {-mse}\")\n",
        "\n",
        "print(f\"Model: MLP Regressor\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "egAH__4IyP4K",
        "outputId": "b5818169-c068-49ca-c6c3-e9309e6ef239"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features =  9\n",
            "Original Data:\n",
            "   Cement  Blast Furnace Slag  Fly Ash  Water  Superplasticizer  \\\n",
            "0   540.0                 0.0      0.0  162.0               2.5   \n",
            "1   540.0                 0.0      0.0  162.0               2.5   \n",
            "2   332.5               142.5      0.0  228.0               0.0   \n",
            "3   332.5               142.5      0.0  228.0               0.0   \n",
            "4   198.6               132.4      0.0  192.0               0.0   \n",
            "\n",
            "   Coarse Aggregate  Fine Aggregate  Age  Strength  \n",
            "0            1040.0           676.0   28     79.99  \n",
            "1            1055.0           676.0   28     61.89  \n",
            "2             932.0           594.0  270     40.27  \n",
            "3             932.0           594.0  365     41.05  \n",
            "4             978.4           825.5  360     44.30  \n",
            "\n",
            "Model: MLP Regressor\n",
            "r2_Score: 88%\n",
            "Performance Metric: -30.90880365729025\n",
            "Model: MLP Regressor\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# RANDOM FOREST"
      ],
      "metadata": {
        "id": "C741zdP6zFBZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, f1_score, mean_squared_error, r2_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.compose import ColumnTransformer\n",
        "# Load your data\n",
        "csv_path = '/content/concrete_data.csv'\n",
        "target_column = 'Strength'\n",
        "df = pd.read_csv(csv_path)\n",
        "\n",
        "num_columns = df.shape[1]\n",
        "print(\"Features = \", num_columns)\n",
        "num_selected_features = df.shape[1] - 1\n",
        "\n",
        "print(\"Original Data:\")\n",
        "print(df.head())\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    label_encoder = LabelEncoder()\n",
        "    y_encoded = label_encoder.fit_transform(y)\n",
        "else:\n",
        "    y_encoded = y\n",
        "\n",
        "numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_features = X.select_dtypes(include=['object']).columns\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_features),\n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ])\n",
        "\n",
        "feature_selector = SelectKBest(score_func=f_classif, k=num_selected_features)\n",
        "\n",
        "model = RandomForestRegressor();\n",
        "\n",
        "model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                  ('selector', feature_selector),\n",
        "                                  ('model', model)])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    metric = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "    print(f\"\\nModel: Random Forest Regressor\")\n",
        "    print(f\"F1 Score: {f1}\")\n",
        "\n",
        "    print(f\"Performance Metric: {int(metric * 100)}%\")\n",
        "\n",
        "else:\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    print(f\"\\nModel: Random Forest Regressor\")\n",
        "    print(f\"r2_Score: {int(r2 * 100)}%\")\n",
        "    metric = r2\n",
        "\n",
        "    print(f\"Performance Metric: {-mse}\")\n",
        "\n",
        "print(f\"Model: Random Forest Regressor\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yYxELJg9zFTF",
        "outputId": "9ec331a6-2d0e-43ed-d664-a8db2042998d"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features =  9\n",
            "Original Data:\n",
            "   Cement  Blast Furnace Slag  Fly Ash  Water  Superplasticizer  \\\n",
            "0   540.0                 0.0      0.0  162.0               2.5   \n",
            "1   540.0                 0.0      0.0  162.0               2.5   \n",
            "2   332.5               142.5      0.0  228.0               0.0   \n",
            "3   332.5               142.5      0.0  228.0               0.0   \n",
            "4   198.6               132.4      0.0  192.0               0.0   \n",
            "\n",
            "   Coarse Aggregate  Fine Aggregate  Age  Strength  \n",
            "0            1040.0           676.0   28     79.99  \n",
            "1            1055.0           676.0   28     61.89  \n",
            "2             932.0           594.0  270     40.27  \n",
            "3             932.0           594.0  365     41.05  \n",
            "4             978.4           825.5  360     44.30  \n",
            "\n",
            "Model: Random Forest Regressor\n",
            "r2_Score: 87%\n",
            "Performance Metric: -31.42433484330412\n",
            "Model: Random Forest Regressor\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# LINEAR REGRESSION"
      ],
      "metadata": {
        "id": "LjRMqgspziEo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, f1_score, mean_squared_error, r2_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "# Load your data\n",
        "csv_path = '/content/concrete_data.csv'\n",
        "target_column = 'Strength'\n",
        "df = pd.read_csv(csv_path)\n",
        "\n",
        "num_columns = df.shape[1]\n",
        "print(\"Features = \", num_columns)\n",
        "num_selected_features = df.shape[1] - 1\n",
        "\n",
        "print(\"Original Data:\")\n",
        "print(df.head())\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    label_encoder = LabelEncoder()\n",
        "    y_encoded = label_encoder.fit_transform(y)\n",
        "else:\n",
        "    y_encoded = y\n",
        "\n",
        "numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_features = X.select_dtypes(include=['object']).columns\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_features),\n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ])\n",
        "\n",
        "feature_selector = SelectKBest(score_func=f_classif, k=num_selected_features)\n",
        "\n",
        "model = LinearRegression();\n",
        "\n",
        "model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                  ('selector', feature_selector),\n",
        "                                  ('model', model)])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    metric = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "    print(f\"\\nModel: Linear Regression\")\n",
        "    print(f\"F1 Score: {f1}\")\n",
        "\n",
        "    print(f\"Performance Metric: {int(metric * 100)}%\")\n",
        "\n",
        "else:\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    print(f\"\\nModel: Linear Regression\")\n",
        "    print(f\"r2_Score: {int(r2 * 100)}%\")\n",
        "    metric = r2\n",
        "\n",
        "    print(f\"Performance Metric: {-mse}\")\n",
        "\n",
        "print(f\"Model: Linear Regression\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gN4DXSOyzhbQ",
        "outputId": "71bbd338-212c-4b62-e8fa-3bdde544af43"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features =  9\n",
            "Original Data:\n",
            "   Cement  Blast Furnace Slag  Fly Ash  Water  Superplasticizer  \\\n",
            "0   540.0                 0.0      0.0  162.0               2.5   \n",
            "1   540.0                 0.0      0.0  162.0               2.5   \n",
            "2   332.5               142.5      0.0  228.0               0.0   \n",
            "3   332.5               142.5      0.0  228.0               0.0   \n",
            "4   198.6               132.4      0.0  192.0               0.0   \n",
            "\n",
            "   Coarse Aggregate  Fine Aggregate  Age  Strength  \n",
            "0            1040.0           676.0   28     79.99  \n",
            "1            1055.0           676.0   28     61.89  \n",
            "2             932.0           594.0  270     40.27  \n",
            "3             932.0           594.0  365     41.05  \n",
            "4             978.4           825.5  360     44.30  \n",
            "\n",
            "Model: Linear Regression\n",
            "r2_Score: 62%\n",
            "Performance Metric: -95.97094009110683\n",
            "Model: Linear Regression\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ELASTIC NET"
      ],
      "metadata": {
        "id": "nyYHfdFQ0fsN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, f1_score, mean_squared_error, r2_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.linear_model import ElasticNet\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "# Load your data\n",
        "csv_path = '/content/concrete_data.csv'\n",
        "target_column = 'Strength'\n",
        "df = pd.read_csv(csv_path)\n",
        "\n",
        "num_columns = df.shape[1]\n",
        "print(\"Features = \", num_columns)\n",
        "num_selected_features = df.shape[1] - 1\n",
        "\n",
        "print(\"Original Data:\")\n",
        "print(df.head())\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    label_encoder = LabelEncoder()\n",
        "    y_encoded = label_encoder.fit_transform(y)\n",
        "else:\n",
        "    y_encoded = y\n",
        "\n",
        "numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_features = X.select_dtypes(include=['object']).columns\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_features),\n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ])\n",
        "\n",
        "feature_selector = SelectKBest(score_func=f_classif, k=num_selected_features)\n",
        "\n",
        "model = ElasticNet();\n",
        "\n",
        "model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                  ('selector', feature_selector),\n",
        "                                  ('model', model)])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    metric = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "    print(f\"\\nModel: Elastic Net\")\n",
        "    print(f\"F1 Score: {f1}\")\n",
        "\n",
        "    print(f\"Performance Metric: {int(metric * 100)}%\")\n",
        "\n",
        "else:\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    print(f\"\\nModel: Elastic Net\")\n",
        "    print(f\"r2_Score: {int(r2 * 100)}%\")\n",
        "    metric = r2\n",
        "\n",
        "    print(f\"Performance Metric: {-mse}\")\n",
        "\n",
        "print(f\"Model: Elastic Net\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_5hH75FG0fEg",
        "outputId": "cd7d9b95-6e8d-4a52-a693-ba32160e09eb"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features =  9\n",
            "Original Data:\n",
            "   Cement  Blast Furnace Slag  Fly Ash  Water  Superplasticizer  \\\n",
            "0   540.0                 0.0      0.0  162.0               2.5   \n",
            "1   540.0                 0.0      0.0  162.0               2.5   \n",
            "2   332.5               142.5      0.0  228.0               0.0   \n",
            "3   332.5               142.5      0.0  228.0               0.0   \n",
            "4   198.6               132.4      0.0  192.0               0.0   \n",
            "\n",
            "   Coarse Aggregate  Fine Aggregate  Age  Strength  \n",
            "0            1040.0           676.0   28     79.99  \n",
            "1            1055.0           676.0   28     61.89  \n",
            "2             932.0           594.0  270     40.27  \n",
            "3             932.0           594.0  365     41.05  \n",
            "4             978.4           825.5  360     44.30  \n",
            "\n",
            "Model: Elastic Net\n",
            "r2_Score: 51%\n",
            "Performance Metric: -125.08907167793754\n",
            "Model: Elastic Net\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# SVR"
      ],
      "metadata": {
        "id": "7tndydfh3Flg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n",
        "from sklearn.feature_selection import SelectKBest, f_classif\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, f1_score, mean_squared_error, r2_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.linear_model import LinearRegression, ElasticNet\n",
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "# Load your data\n",
        "csv_path = '/content/concrete_data.csv'\n",
        "target_column = 'Strength'\n",
        "df = pd.read_csv(csv_path)\n",
        "\n",
        "num_columns = df.shape[1]\n",
        "print(\"Features = \", num_columns)\n",
        "num_selected_features = df.shape[1] - 1\n",
        "\n",
        "print(\"Original Data:\")\n",
        "print(df.head())\n",
        "\n",
        "X = df.drop(columns=[target_column])\n",
        "y = df[target_column]\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    label_encoder = LabelEncoder()\n",
        "    y_encoded = label_encoder.fit_transform(y)\n",
        "else:\n",
        "    y_encoded = y\n",
        "\n",
        "numeric_features = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "\n",
        "categorical_features = X.select_dtypes(include=['object']).columns\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_features),\n",
        "        ('cat', categorical_transformer, categorical_features)\n",
        "    ])\n",
        "\n",
        "feature_selector = SelectKBest(score_func=f_classif, k=num_selected_features)\n",
        "\n",
        "model = SVR();\n",
        "\n",
        "model_pipeline = Pipeline(steps=[('preprocessor', preprocessor),\n",
        "                                  ('selector', feature_selector),\n",
        "                                  ('model', model)])\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "if y.dtypes == 'object':\n",
        "    metric = accuracy_score(y_test, y_pred)\n",
        "\n",
        "    f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "    print(f\"\\nModel: Elastic Net\")\n",
        "    print(f\"F1 Score: {f1}\")\n",
        "\n",
        "    print(f\"Performance Metric: SVR\")\n",
        "\n",
        "else:\n",
        "    mse = mean_squared_error(y_test, y_pred)\n",
        "    r2 = r2_score(y_test, y_pred)\n",
        "    print(f\"\\nModel: Elastic Net\")\n",
        "    print(f\"r2_Score: {int(r2 * 100)}%\")\n",
        "    metric = r2\n",
        "\n",
        "    print(f\"Performance Metric: {-mse}\")\n",
        "\n",
        "print(f\"Model: SVC\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5SEfBNta3GKv",
        "outputId": "a3b40f3b-db1b-4c0a-8a65-79de096a51a5"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Features =  9\n",
            "Original Data:\n",
            "   Cement  Blast Furnace Slag  Fly Ash  Water  Superplasticizer  \\\n",
            "0   540.0                 0.0      0.0  162.0               2.5   \n",
            "1   540.0                 0.0      0.0  162.0               2.5   \n",
            "2   332.5               142.5      0.0  228.0               0.0   \n",
            "3   332.5               142.5      0.0  228.0               0.0   \n",
            "4   198.6               132.4      0.0  192.0               0.0   \n",
            "\n",
            "   Coarse Aggregate  Fine Aggregate  Age  Strength  \n",
            "0            1040.0           676.0   28     79.99  \n",
            "1            1055.0           676.0   28     61.89  \n",
            "2             932.0           594.0  270     40.27  \n",
            "3             932.0           594.0  365     41.05  \n",
            "4             978.4           825.5  360     44.30  \n",
            "\n",
            "Model: Elastic Net\n",
            "r2_Score: 65%\n",
            "Performance Metric: -88.95941487206818\n",
            "Model: SVC\n"
          ]
        }
      ]
    }
  ]
}